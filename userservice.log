[INFO ] 2019-11-13 17:12:34,827 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$e58d4c9b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-13 17:12:35,111 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-13 17:12:35,493 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=0b04e536-d11b-3a14-a1c4-0e71781fdc86
[INFO ] 2019-11-13 17:12:35,567 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$e58d4c9b] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-13 17:12:35,772 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-13 17:12:35,783 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-13 17:12:35,783 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-13 17:12:35,784 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-13 17:12:35,855 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-13 17:12:35,855 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 733 ms
[WARN ] 2019-11-13 17:12:35,893 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-13 17:12:35,894 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-13 17:12:35,897 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-13 17:12:35,897 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-13 17:12:35,999 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-13 17:12:36,531 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-13 17:12:36,617 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-13 17:12:36,642 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-13 17:12:36,879 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-13 17:12:36,879 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-13 17:12:36,955 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-13 17:12:36,955 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-13 17:12:37,071 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-13 17:12:37,159 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-13 17:12:37,159 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-13 17:12:37,159 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-13 17:12:37,159 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-13 17:12:37,159 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-13 17:12:37,159 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-13 17:12:37,160 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-13 17:12:37,262 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-13 17:12:37,264 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-13 17:12:37,266 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-13 17:12:37,269 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573636357268 with initial instances count: 1
[INFO ] 2019-11-13 17:12:37,272 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-13 17:12:37,272 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573636357272, current=UP, previous=STARTING]
[INFO ] 2019-11-13 17:12:37,273 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-13 17:12:37,280 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-13 17:12:37,295 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-13 17:12:37,297 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-13 17:12:37,297 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-13 17:12:37,464 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.188 seconds (JVM running for 4.478)
[INFO ] 2019-11-13 17:22:22,023 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$5b753667] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-13 17:22:22,311 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-13 17:22:22,730 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-13 17:22:22,807 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$5b753667] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-13 17:22:22,998 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-13 17:22:23,009 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-13 17:22:23,010 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-13 17:22:23,010 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-13 17:22:23,084 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-13 17:22:23,084 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 763 ms
[WARN ] 2019-11-13 17:22:23,125 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-13 17:22:23,125 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-13 17:22:23,128 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-13 17:22:23,128 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-13 17:22:23,232 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-13 17:22:23,791 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-13 17:22:23,879 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-13 17:22:23,906 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-13 17:22:24,154 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-13 17:22:24,154 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-13 17:22:24,240 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-13 17:22:24,241 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-13 17:22:24,377 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-13 17:22:24,466 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-13 17:22:24,603 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-13 17:22:24,604 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-13 17:22:24,606 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-13 17:22:24,609 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573636944608 with initial instances count: 0
[INFO ] 2019-11-13 17:22:24,611 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-13 17:22:24,612 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573636944611, current=UP, previous=STARTING]
[INFO ] 2019-11-13 17:22:24,613 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-13 17:22:24,620 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-13 17:22:24,637 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-13 17:22:24,637 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-13 17:22:24,666 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-13 17:22:24,804 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.338 seconds (JVM running for 4.404)
[INFO ] 2019-11-13 17:22:40,300 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-13 17:22:40,300 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-13 17:22:40,304 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 4 ms
[INFO ] 2019-11-13 17:22:40,324 com.example.userservice.controller.UserController - ------------reuqest url:http://localhost:8070/user/fkk
[INFO ] 2019-11-13 17:22:54,607 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-13 17:22:54,608 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-13 17:22:54,608 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-13 17:22:54,609 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-13 17:22:54,609 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-13 17:22:54,609 com.netflix.discovery.DiscoveryClient - Application version is -1: false
[INFO ] 2019-11-13 17:22:54,610 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-13 17:22:54,660 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 09:56:27,479 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$98851031] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 09:56:27,779 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-14 09:56:28,182 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-14 09:56:28,260 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$98851031] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 09:56:28,475 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-14 09:56:28,487 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 09:56:28,488 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-14 09:56:28,488 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-14 09:56:28,562 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-14 09:56:28,562 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 773 ms
[WARN ] 2019-11-14 09:56:28,603 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 09:56:28,603 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-14 09:56:28,606 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 09:56:28,606 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-14 09:56:28,717 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-14 09:56:29,254 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-14 09:56:29,343 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-14 09:56:29,373 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-14 09:56:29,623 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-14 09:56:29,623 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-14 09:56:29,712 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-14 09:56:29,713 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-14 09:56:29,839 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 09:56:29,925 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 09:56:29,926 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 09:56:29,926 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 09:56:29,926 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 09:56:29,926 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 09:56:29,926 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-14 09:56:29,926 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[ERROR] 2019-11-14 09:56:30,975 com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://127.0.0.1:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.sun.jersey.api.client.Client.handle(Client.java:652) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource$Builder.get(WebResource.java:509) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplicationsInternal(AbstractJerseyEurekaHttpClient.java:194) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.getApplications(AbstractJerseyEurekaHttpClient.java:165) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272) ~[eureka-client-1.9.13.jar:1.9.13]
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9fee0950.CGLIB$eurekaClient$2(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9fee0950$$FastClassBySpringCGLIB$$717b5ed3.invoke(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9fee0950.eurekaClient(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:279) [spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$ff86ce80.getEurekaClient(<generated>) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at com.example.userservice.UserServiceApplication.main(UserServiceApplication.java:12) [classes/:?]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[?:1.8.0_144]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[?:1.8.0_144]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[?:1.8.0_144]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[?:1.8.0_144]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[?:1.8.0_144]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[?:1.8.0_144]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[?:1.8.0_144]
	at java.net.Socket.connect(Socket.java:589) ~[?:1.8.0_144]
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.10.jar:4.5.10]
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	... 80 more
[WARN ] 2019-11-14 09:56:30,993 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failed with message: java.net.ConnectException: Connection refused: connect
[ERROR] 2019-11-14 09:56:30,996 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272) ~[eureka-client-1.9.13.jar:1.9.13]
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9fee0950.CGLIB$eurekaClient$2(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9fee0950$$FastClassBySpringCGLIB$$717b5ed3.invoke(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$9fee0950.eurekaClient(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:279) [spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$ff86ce80.getEurekaClient(<generated>) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at com.example.userservice.UserServiceApplication.main(UserServiceApplication.java:12) [classes/:?]
[WARN ] 2019-11-14 09:56:30,999 com.netflix.discovery.DiscoveryClient - Using default backup registry implementation which does not do anything.
[INFO ] 2019-11-14 09:56:31,001 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-14 09:56:31,005 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-14 09:56:31,012 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573696591009 with initial instances count: 0
[INFO ] 2019-11-14 09:56:31,016 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-14 09:56:31,018 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573696591018, current=UP, previous=STARTING]
[INFO ] 2019-11-14 09:56:31,021 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-14 09:56:31,033 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 09:56:31,056 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-14 09:56:31,057 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-14 09:56:31,242 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 4.383 seconds (JVM running for 5.663)
[ERROR] 2019-11-14 09:56:32,028 com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://127.0.0.1:8761/eureka/}
com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:187) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.filter.GZIPContentEncodingFilter.handle(GZIPContentEncodingFilter.java:123) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.EurekaIdentityHeaderFilter.handle(EurekaIdentityHeaderFilter.java:27) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.sun.jersey.api.client.Client.handle(Client.java:652) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.handle(WebResource.java:682) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource.access$200(WebResource.java:74) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.WebResource$Builder.post(WebResource.java:570) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.register(AbstractJerseyEurekaHttpClient.java:56) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:847) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_144]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
Caused by: java.net.ConnectException: Connection refused: connect
	at java.net.DualStackPlainSocketImpl.waitForConnect(Native Method) ~[?:1.8.0_144]
	at java.net.DualStackPlainSocketImpl.socketConnect(DualStackPlainSocketImpl.java:85) ~[?:1.8.0_144]
	at java.net.AbstractPlainSocketImpl.doConnect(AbstractPlainSocketImpl.java:350) ~[?:1.8.0_144]
	at java.net.AbstractPlainSocketImpl.connectToAddress(AbstractPlainSocketImpl.java:206) ~[?:1.8.0_144]
	at java.net.AbstractPlainSocketImpl.connect(AbstractPlainSocketImpl.java:188) ~[?:1.8.0_144]
	at java.net.PlainSocketImpl.connect(PlainSocketImpl.java:172) ~[?:1.8.0_144]
	at java.net.SocksSocketImpl.connect(SocksSocketImpl.java:392) ~[?:1.8.0_144]
	at java.net.Socket.connect(Socket.java:589) ~[?:1.8.0_144]
	at org.apache.http.conn.scheme.PlainSocketFactory.connectSocket(PlainSocketFactory.java:121) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.conn.DefaultClientConnectionOperator.openConnection(DefaultClientConnectionOperator.java:180) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.conn.AbstractPoolEntry.open(AbstractPoolEntry.java:144) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.conn.AbstractPooledConnAdapter.open(AbstractPooledConnAdapter.java:134) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.DefaultRequestDirector.tryConnect(DefaultRequestDirector.java:605) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.DefaultRequestDirector.execute(DefaultRequestDirector.java:440) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.AbstractHttpClient.doExecute(AbstractHttpClient.java:835) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:118) ~[httpclient-4.5.10.jar:4.5.10]
	at org.apache.http.impl.client.CloseableHttpClient.execute(CloseableHttpClient.java:56) ~[httpclient-4.5.10.jar:4.5.10]
	at com.sun.jersey.client.apache4.ApacheHttpClient4Handler.handle(ApacheHttpClient4Handler.java:173) ~[jersey-apache-client4-1.19.1.jar:1.19.1]
	... 30 more
[WARN ] 2019-11-14 09:56:32,030 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failed with message: java.net.ConnectException: Connection refused: connect
[WARN ] 2019-11-14 09:56:32,030 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration failed Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:847) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_144]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
[WARN ] 2019-11-14 09:56:32,030 com.netflix.discovery.InstanceInfoReplicator - There was a problem with the instance info replicator
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$1.execute(EurekaHttpClientDecorator.java:59) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.register(EurekaHttpClientDecorator.java:56) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.register(DiscoveryClient.java:847) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.InstanceInfoReplicator.run(InstanceInfoReplicator.java:121) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.InstanceInfoReplicator$1.run(InstanceInfoReplicator.java:101) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.access$201(ScheduledThreadPoolExecutor.java:180) [?:1.8.0_144]
	at java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask.run(ScheduledThreadPoolExecutor.java:293) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
[INFO ] 2019-11-14 09:57:48,738 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$9e663200] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 09:57:49,026 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-14 09:57:49,428 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-14 09:57:49,506 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$9e663200] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 09:57:49,716 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-14 09:57:49,727 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 09:57:49,728 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-14 09:57:49,728 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-14 09:57:49,802 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-14 09:57:49,803 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 768 ms
[WARN ] 2019-11-14 09:57:49,842 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 09:57:49,843 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-14 09:57:49,846 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 09:57:49,846 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-14 09:57:49,947 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-14 09:57:50,470 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-14 09:57:50,552 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-14 09:57:50,580 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-14 09:57:50,832 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-14 09:57:50,832 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-14 09:57:50,914 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-14 09:57:50,914 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-14 09:57:51,043 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 09:57:51,131 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 09:57:51,131 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 09:57:51,132 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 09:57:51,132 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 09:57:51,132 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 09:57:51,132 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-14 09:57:51,132 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 09:57:51,266 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 09:57:51,268 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-14 09:57:51,270 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-14 09:57:51,273 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573696671272 with initial instances count: 0
[INFO ] 2019-11-14 09:57:51,275 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-14 09:57:51,276 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573696671276, current=UP, previous=STARTING]
[INFO ] 2019-11-14 09:57:51,277 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-14 09:57:51,283 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 09:57:51,320 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-14 09:57:51,321 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-14 09:57:51,355 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-14 09:57:51,502 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.429 seconds (JVM running for 4.435)
[INFO ] 2019-11-14 14:06:41,335 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$98851031] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 14:06:41,651 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-14 14:06:42,058 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-14 14:06:42,136 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$98851031] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 14:06:42,340 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-14 14:06:42,352 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 14:06:42,352 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-14 14:06:42,352 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-14 14:06:42,427 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-14 14:06:42,427 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 765 ms
[WARN ] 2019-11-14 14:06:42,469 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 14:06:42,470 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-14 14:06:42,473 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 14:06:42,473 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-14 14:06:42,583 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-14 14:06:43,124 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-14 14:06:43,207 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-14 14:06:43,232 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-14 14:06:43,474 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-14 14:06:43,474 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-14 14:06:43,550 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-14 14:06:43,551 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-14 14:06:43,687 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 14:06:43,773 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 14:06:43,773 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 14:06:43,773 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 14:06:43,773 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 14:06:43,774 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 14:06:43,774 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-14 14:06:43,774 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 14:06:43,929 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 14:06:43,931 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-14 14:06:43,933 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-14 14:06:43,936 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573711603935 with initial instances count: 0
[INFO ] 2019-11-14 14:06:43,938 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-14 14:06:43,938 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573711603938, current=UP, previous=STARTING]
[INFO ] 2019-11-14 14:06:43,939 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-14 14:06:43,946 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 14:06:43,964 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-14 14:06:43,965 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-14 14:06:43,996 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-14 14:06:44,128 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.418 seconds (JVM running for 4.582)
[INFO ] 2019-11-14 14:07:13,931 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 14:07:13,931 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 14:07:13,931 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 14:07:13,932 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 14:07:13,932 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 14:07:13,932 com.netflix.discovery.DiscoveryClient - Application version is -1: false
[INFO ] 2019-11-14 14:07:13,932 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 14:07:13,961 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 14:11:43,779 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 14:12:33,439 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$9dfa06c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 14:12:33,733 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-14 14:12:34,160 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-14 14:12:34,237 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$9dfa06c7] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 14:12:34,455 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8071 (http)
[INFO ] 2019-11-14 14:12:34,467 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8071"]
[INFO ] 2019-11-14 14:12:34,468 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-14 14:12:34,468 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-14 14:12:34,545 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-14 14:12:34,545 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 802 ms
[WARN ] 2019-11-14 14:12:34,590 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 14:12:34,591 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-14 14:12:34,594 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 14:12:34,594 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-14 14:12:34,714 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-14 14:12:35,265 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-14 14:12:35,356 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-14 14:12:35,380 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-14 14:12:35,632 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-14 14:12:35,633 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-14 14:12:35,711 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-14 14:12:35,711 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-14 14:12:35,844 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 14:12:35,932 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 14:12:35,933 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 14:12:35,933 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 14:12:35,933 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 14:12:35,933 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 14:12:35,933 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-14 14:12:35,933 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 14:12:36,034 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 14:12:36,036 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-14 14:12:36,037 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-14 14:12:36,040 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573711956039 with initial instances count: 2
[INFO ] 2019-11-14 14:12:36,042 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-14 14:12:36,043 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573711956043, current=UP, previous=STARTING]
[INFO ] 2019-11-14 14:12:36,044 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8071: registering service...
[INFO ] 2019-11-14 14:12:36,051 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8071"]
[INFO ] 2019-11-14 14:12:36,069 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8071 - registration status: 204
[INFO ] 2019-11-14 14:12:36,073 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8071 (http) with context path ''
[INFO ] 2019-11-14 14:12:36,074 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8071
[INFO ] 2019-11-14 14:12:36,244 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.462 seconds (JVM running for 4.464)
[INFO ] 2019-11-14 14:13:35,266 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-14 14:13:35,267 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-14 14:13:35,271 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 4 ms
[INFO ] 2019-11-14 14:13:35,293 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:49,513 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-14 14:13:49,514 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-14 14:13:49,519 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 5 ms
[INFO ] 2019-11-14 14:13:49,544 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:51,949 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:53,440 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:56,764 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:56,942 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:57,129 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:57,263 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:57,446 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:57,617 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:57,767 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:57,938 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:58,088 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:58,286 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:58,440 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:58,598 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:58,778 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:58,933 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:59,086 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:59,396 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:59,564 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:13:59,712 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:13:59,885 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:14:00,075 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 14:14:00,232 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 14:14:00,406 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/fkkkk
[INFO ] 2019-11-14 17:28:23,919 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$362c4b97] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 17:28:24,244 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-14 17:28:24,693 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-14 17:28:24,773 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$362c4b97] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 17:28:25,031 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-14 17:28:25,046 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 17:28:25,047 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-14 17:28:25,048 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-14 17:28:25,130 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-14 17:28:25,131 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 876 ms
[WARN ] 2019-11-14 17:28:25,180 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 17:28:25,180 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-14 17:28:25,183 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 17:28:25,184 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-14 17:28:25,314 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-14 17:28:25,875 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-14 17:28:25,959 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-14 17:28:25,984 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-14 17:28:26,308 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-14 17:28:26,308 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-14 17:28:26,405 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-14 17:28:26,405 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-14 17:28:26,541 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 17:28:26,646 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 17:28:26,646 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 17:28:26,646 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 17:28:26,647 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 17:28:26,647 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 17:28:26,647 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-14 17:28:26,647 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 17:28:26,948 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 17:28:26,950 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-14 17:28:26,952 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-14 17:28:26,955 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573723706954 with initial instances count: 0
[INFO ] 2019-11-14 17:28:26,958 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-14 17:28:26,958 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573723706958, current=UP, previous=STARTING]
[INFO ] 2019-11-14 17:28:26,959 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-14 17:28:26,970 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-14 17:28:27,012 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-14 17:28:27,013 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-14 17:28:27,211 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 4.166 seconds (JVM running for 5.862)
[INFO ] 2019-11-14 17:28:27,372 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-14 17:28:56,951 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 17:28:56,952 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 17:28:56,953 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 17:28:56,953 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 17:28:56,953 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 17:28:56,953 com.netflix.discovery.DiscoveryClient - Application version is -1: false
[INFO ] 2019-11-14 17:28:56,954 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 17:28:57,060 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 17:29:37,969 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-14 17:29:37,969 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-14 17:29:37,974 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 5 ms
[INFO ] 2019-11-14 17:29:37,997 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fkkkk
[INFO ] 2019-11-14 17:33:58,223 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$27721d84] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 17:33:58,525 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-14 17:33:58,970 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-14 17:33:59,056 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$27721d84] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-14 17:33:59,261 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8071 (http)
[INFO ] 2019-11-14 17:33:59,273 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8071"]
[INFO ] 2019-11-14 17:33:59,274 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-14 17:33:59,274 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-14 17:33:59,350 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-14 17:33:59,350 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 814 ms
[WARN ] 2019-11-14 17:33:59,393 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 17:33:59,393 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-14 17:33:59,396 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-14 17:33:59,396 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-14 17:33:59,514 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-14 17:34:00,113 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-14 17:34:00,196 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-14 17:34:00,222 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-14 17:34:00,472 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-14 17:34:00,473 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-14 17:34:00,561 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-14 17:34:00,561 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-14 17:34:00,682 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-14 17:34:00,777 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-14 17:34:00,778 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-14 17:34:00,778 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-14 17:34:00,778 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-14 17:34:00,778 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-14 17:34:00,779 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-14 17:34:00,779 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-14 17:34:00,949 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-14 17:34:00,952 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-14 17:34:00,957 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-14 17:34:00,960 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1573724040959 with initial instances count: 3
[INFO ] 2019-11-14 17:34:00,962 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-14 17:34:00,963 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1573724040963, current=UP, previous=STARTING]
[INFO ] 2019-11-14 17:34:00,964 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8071: registering service...
[INFO ] 2019-11-14 17:34:00,972 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8071"]
[INFO ] 2019-11-14 17:34:00,988 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8071 (http) with context path ''
[INFO ] 2019-11-14 17:34:00,989 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8071
[INFO ] 2019-11-14 17:34:01,020 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8071 - registration status: 204
[INFO ] 2019-11-14 17:34:01,197 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.637 seconds (JVM running for 4.816)
[INFO ] 2019-11-20 16:32:57,086 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$85592626] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:32:57,399 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-20 16:32:57,819 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-20 16:32:57,897 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$85592626] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:32:58,117 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-20 16:32:58,130 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:32:58,131 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-20 16:32:58,131 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-20 16:32:58,209 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-20 16:32:58,210 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 801 ms
[WARN ] 2019-11-20 16:32:58,253 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:32:58,253 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-20 16:32:58,256 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:32:58,256 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-20 16:32:58,367 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-20 16:32:58,925 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-20 16:32:59,010 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-20 16:32:59,038 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-20 16:32:59,287 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:32:59,287 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:32:59,363 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-20 16:32:59,363 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-20 16:32:59,490 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:32:59,580 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:32:59,580 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:32:59,581 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:32:59,581 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:32:59,581 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:32:59,581 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:32:59,581 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[WARN ] 2019-11-20 16:32:59,711 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failure with status code 404; retrying on another server if available
[ERROR] 2019-11-20 16:32:59,712 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272) ~[eureka-client-1.9.13.jar:1.9.13]
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$8cc21f45.CGLIB$eurekaClient$0(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$8cc21f45$$FastClassBySpringCGLIB$$64b03d72.invoke(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$8cc21f45.eurekaClient(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:279) [spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$556aca9a.getEurekaClient(<generated>) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at com.example.userservice.UserServiceApplication.main(UserServiceApplication.java:12) [classes/:?]
[WARN ] 2019-11-20 16:32:59,717 com.netflix.discovery.DiscoveryClient - Using default backup registry implementation which does not do anything.
[INFO ] 2019-11-20 16:32:59,719 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-20 16:32:59,721 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-20 16:32:59,723 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1574238779722 with initial instances count: 0
[INFO ] 2019-11-20 16:32:59,725 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-20 16:32:59,726 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1574238779726, current=UP, previous=STARTING]
[INFO ] 2019-11-20 16:32:59,727 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-20 16:32:59,734 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:32:59,755 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-20 16:32:59,756 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-20 16:32:59,781 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 404
[INFO ] 2019-11-20 16:32:59,920 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.435 seconds (JVM running for 4.467)
[INFO ] 2019-11-20 16:33:29,721 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:33:29,721 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:33:29,722 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:33:29,722 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:33:29,722 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:33:29,723 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:33:29,723 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[ERROR] 2019-11-20 16:33:29,785 com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://180.76.145.187:8761/eureka/}
javax.ws.rs.WebApplicationException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo["timestamp"])
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:864) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1423) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo["timestamp"])
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch(DeserializationContext.java:1477) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch(DeserializationContext.java:1493) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:1850) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1716) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1228) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:213) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.9.13.jar:1.9.13]
	... 22 more
[WARN ] 2019-11-20 16:33:29,786 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failed with message: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo["timestamp"])
[WARN ] 2019-11-20 16:33:29,788 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failure with status code 404; retrying on another server if available
[ERROR] 2019-11-20 16:33:29,788 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.refreshRegistry(DiscoveryClient.java:1497) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient$CacheRefreshThread.run(DiscoveryClient.java:1464) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
[ERROR] 2019-11-20 16:33:29,824 com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient - Request execution error. endpoint=DefaultEndpoint{ serviceUrl='http://180.76.145.187:8761/eureka/}
javax.ws.rs.WebApplicationException: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo["timestamp"])
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:110) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:634) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.sun.jersey.api.client.ClientResponse.getEntity(ClientResponse.java:586) ~[jersey-client-1.19.1.jar:1.19.1]
	at com.netflix.discovery.shared.transport.jersey.AbstractJerseyEurekaHttpClient.sendHeartBeat(AbstractJerseyEurekaHttpClient.java:105) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.MetricsCollectingEurekaHttpClient.execute(MetricsCollectingEurekaHttpClient.java:73) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.executeOnNewServer(RedirectingEurekaHttpClient.java:118) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RedirectingEurekaHttpClient.execute(RedirectingEurekaHttpClient.java:79) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:120) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:864) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1423) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
Caused by: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo["timestamp"])
	at com.fasterxml.jackson.databind.exc.MismatchedInputException.from(MismatchedInputException.java:63) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch(DeserializationContext.java:1477) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.DeserializationContext.reportPropertyInputMismatch(DeserializationContext.java:1493) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.ObjectReader._unwrapAndDeserialize(ObjectReader.java:1850) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.ObjectReader._bindAndClose(ObjectReader.java:1716) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.fasterxml.jackson.databind.ObjectReader.readValue(ObjectReader.java:1228) ~[jackson-databind-2.10.0.jar:2.10.0]
	at com.netflix.discovery.converters.EurekaJacksonCodec.readValue(EurekaJacksonCodec.java:213) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.converters.wrappers.CodecWrappers$LegacyJacksonJson.decode(CodecWrappers.java:314) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.provider.DiscoveryJerseyProvider.readFrom(DiscoveryJerseyProvider.java:103) ~[eureka-client-1.9.13.jar:1.9.13]
	... 23 more
[WARN ] 2019-11-20 16:33:29,825 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failed with message: com.fasterxml.jackson.databind.exc.MismatchedInputException: Root name 'timestamp' does not match expected ('instance') for type [simple type, class com.netflix.appinfo.InstanceInfo]
 at [Source: (com.sun.jersey.client.apache4.ApacheHttpClient4Handler$HttpClientResponseInputStream); line: 1, column: 2] (through reference chain: com.netflix.appinfo.InstanceInfo["timestamp"])
[ERROR] 2019-11-20 16:33:29,825 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - was unable to send heartbeat!
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$3.execute(EurekaHttpClientDecorator.java:92) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.sendHeartBeat(EurekaHttpClientDecorator.java:89) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.renew(DiscoveryClient.java:864) [eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient$HeartbeatThread.run(DiscoveryClient.java:1423) [eureka-client-1.9.13.jar:1.9.13]
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511) [?:1.8.0_144]
	at java.util.concurrent.FutureTask.run(FutureTask.java:266) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149) [?:1.8.0_144]
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624) [?:1.8.0_144]
	at java.lang.Thread.run(Thread.java:748) [?:1.8.0_144]
[INFO ] 2019-11-20 16:33:37,311 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$2059bcc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:33:37,628 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-20 16:33:38,043 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-20 16:33:38,121 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$2059bcc3] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:33:38,337 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-20 16:33:38,349 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:33:38,350 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-20 16:33:38,350 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-20 16:33:38,441 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-20 16:33:38,441 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 804 ms
[WARN ] 2019-11-20 16:33:38,487 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:33:38,488 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-20 16:33:38,491 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:33:38,491 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-20 16:33:38,613 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-20 16:33:39,171 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-20 16:33:39,253 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-20 16:33:39,278 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-20 16:33:39,524 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:33:39,524 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:33:39,598 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-20 16:33:39,599 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-20 16:33:39,723 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:33:39,811 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:33:39,812 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:33:39,812 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:33:39,812 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:33:39,812 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:33:39,812 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:33:39,812 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[WARN ] 2019-11-20 16:33:39,922 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failure with status code 404; retrying on another server if available
[ERROR] 2019-11-20 16:33:39,923 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272) ~[eureka-client-1.9.13.jar:1.9.13]
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$27c2b5e2.CGLIB$eurekaClient$0(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$27c2b5e2$$FastClassBySpringCGLIB$$ddec9536.invoke(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$27c2b5e2.eurekaClient(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:279) [spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$53c4ce5e.getEurekaClient(<generated>) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at com.example.userservice.UserServiceApplication.main(UserServiceApplication.java:12) [classes/:?]
[WARN ] 2019-11-20 16:33:39,927 com.netflix.discovery.DiscoveryClient - Using default backup registry implementation which does not do anything.
[INFO ] 2019-11-20 16:33:39,928 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-20 16:33:39,930 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-20 16:33:39,932 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1574238819931 with initial instances count: 0
[INFO ] 2019-11-20 16:33:39,935 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-20 16:33:39,935 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1574238819935, current=UP, previous=STARTING]
[INFO ] 2019-11-20 16:33:39,936 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-20 16:33:39,943 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:33:39,960 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-20 16:33:39,961 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-20 16:33:39,977 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 404
[INFO ] 2019-11-20 16:33:40,137 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.443 seconds (JVM running for 4.589)
[INFO ] 2019-11-20 16:33:58,742 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$5475f700] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:33:59,048 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-20 16:33:59,469 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-20 16:33:59,545 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$5475f700] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:33:59,753 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-20 16:33:59,765 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:33:59,766 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-20 16:33:59,766 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-20 16:33:59,846 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-20 16:33:59,846 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 787 ms
[WARN ] 2019-11-20 16:33:59,889 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:33:59,889 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-20 16:33:59,893 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:33:59,893 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-20 16:34:00,004 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-20 16:34:00,553 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-20 16:34:00,635 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-20 16:34:00,662 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-20 16:34:00,906 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:34:00,907 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:34:00,994 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-20 16:34:00,995 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-20 16:34:01,107 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:34:01,199 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:34:01,199 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:34:01,199 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:34:01,199 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:34:01,200 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:34:01,200 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:34:01,200 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-20 16:34:01,297 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-20 16:34:01,299 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-20 16:34:01,301 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-20 16:34:01,303 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1574238841303 with initial instances count: 1
[INFO ] 2019-11-20 16:34:01,305 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-20 16:34:01,306 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1574238841306, current=UP, previous=STARTING]
[INFO ] 2019-11-20 16:34:01,308 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-20 16:34:01,314 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:34:01,333 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-20 16:34:01,333 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-20 16:34:01,334 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-20 16:34:01,507 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.381 seconds (JVM running for 4.489)
[INFO ] 2019-11-20 16:34:42,785 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-20 16:34:42,785 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-20 16:34:42,790 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 5 ms
[INFO ] 2019-11-20 16:34:42,811 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:34:49,774 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:35:17,207 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$6cb3280] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:35:17,507 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-20 16:35:17,907 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-20 16:35:17,985 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$6cb3280] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:35:18,199 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-20 16:35:18,211 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:35:18,212 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-20 16:35:18,213 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-20 16:35:18,300 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-20 16:35:18,300 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 783 ms
[WARN ] 2019-11-20 16:35:18,342 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:35:18,342 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-20 16:35:18,345 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:35:18,345 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-20 16:35:18,461 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-20 16:35:19,012 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-20 16:35:19,091 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-20 16:35:19,117 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-20 16:35:19,369 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:35:19,369 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:35:19,442 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-20 16:35:19,443 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-20 16:35:19,565 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:35:19,657 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:35:19,657 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:35:19,658 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:35:19,658 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:35:19,658 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:35:19,658 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:35:19,658 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[WARN ] 2019-11-20 16:35:19,728 com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient - Request execution failure with status code 404; retrying on another server if available
[ERROR] 2019-11-20 16:35:19,729 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - was unable to refresh its cache! status = Cannot execute request on any known server
com.netflix.discovery.shared.transport.TransportException: Cannot execute request on any known server
	at com.netflix.discovery.shared.transport.decorator.RetryableEurekaHttpClient.execute(RetryableEurekaHttpClient.java:112) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator$6.execute(EurekaHttpClientDecorator.java:137) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.SessionedEurekaHttpClient.execute(SessionedEurekaHttpClient.java:77) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.shared.transport.decorator.EurekaHttpClientDecorator.getApplications(EurekaHttpClientDecorator.java:134) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.getAndStoreFullRegistry(DiscoveryClient.java:1069) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.fetchRegistry(DiscoveryClient.java:983) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:430) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:276) ~[eureka-client-1.9.13.jar:1.9.13]
	at com.netflix.discovery.DiscoveryClient.<init>(DiscoveryClient.java:272) ~[eureka-client-1.9.13.jar:1.9.13]
	at org.springframework.cloud.netflix.eureka.CloudEurekaClient.<init>(CloudEurekaClient.java:67) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration.eurekaClient(EurekaClientAutoConfiguration.java:324) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$e342b9f.CGLIB$eurekaClient$2(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$e342b9f$$FastClassBySpringCGLIB$$8fded5c1.invoke(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244) ~[spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363) ~[spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.EurekaClientAutoConfiguration$RefreshableEurekaClientConfiguration$$EnhancerBySpringCGLIB$$e342b9f.eurekaClient(<generated>) ~[spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:640) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:625) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1338) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1177) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:557) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:517) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$1(AbstractBeanFactory.java:359) ~[spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$BeanLifecycleWrapper.getBean(GenericScope.java:389) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.context.scope.GenericScope.get(GenericScope.java:186) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:356) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:202) [spring-beans-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.target.SimpleBeanTargetSource.getTarget(SimpleBeanTargetSource.java:35) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getTargetObject(EurekaRegistration.java:129) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration.getEurekaClient(EurekaRegistration.java:117) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[?:1.8.0_144]
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[?:1.8.0_144]
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[?:1.8.0_144]
	at java.lang.reflect.Method.invoke(Method.java:498) ~[?:1.8.0_144]
	at org.springframework.util.ReflectionUtils.invokeMethod(ReflectionUtils.java:279) [spring-core-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.context.scope.GenericScope$LockedScopedProxyFactoryBean.invoke(GenericScope.java:499) [spring-cloud-context-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:186) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$CglibMethodInvocation.proceed(CglibAopProxy.java:747) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:689) [spring-aop-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaRegistration$$EnhancerBySpringCGLIB$$d2f6d08.getEurekaClient(<generated>) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.maybeInitializeClient(EurekaServiceRegistry.java:57) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry.register(EurekaServiceRegistry.java:38) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration.start(EurekaAutoServiceRegistration.java:83) [spring-cloud-netflix-eureka-client-2.2.0.RC2.jar:2.2.0.RC2]
	at org.springframework.context.support.DefaultLifecycleProcessor.doStart(DefaultLifecycleProcessor.java:182) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.access$200(DefaultLifecycleProcessor.java:53) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor$LifecycleGroup.start(DefaultLifecycleProcessor.java:360) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.startBeans(DefaultLifecycleProcessor.java:158) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.DefaultLifecycleProcessor.onRefresh(DefaultLifecycleProcessor.java:122) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.finishRefresh(AbstractApplicationContext.java:894) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.finishRefresh(ServletWebServerApplicationContext.java:162) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:553) [spring-context-5.2.1.RELEASE.jar:5.2.1.RELEASE]
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:141) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:747) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:397) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1226) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1215) [spring-boot-2.2.1.RELEASE.jar:2.2.1.RELEASE]
	at com.example.userservice.UserServiceApplication.main(UserServiceApplication.java:12) [classes/:?]
[WARN ] 2019-11-20 16:35:19,732 com.netflix.discovery.DiscoveryClient - Using default backup registry implementation which does not do anything.
[INFO ] 2019-11-20 16:35:19,734 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-20 16:35:19,735 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-20 16:35:19,738 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1574238919737 with initial instances count: 0
[INFO ] 2019-11-20 16:35:19,740 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-20 16:35:19,740 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1574238919740, current=UP, previous=STARTING]
[INFO ] 2019-11-20 16:35:19,741 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-20 16:35:19,748 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:35:19,766 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-20 16:35:19,767 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-20 16:35:19,780 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 404
[INFO ] 2019-11-20 16:35:19,944 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.405 seconds (JVM running for 4.434)
[INFO ] 2019-11-20 16:35:34,095 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$35b680f8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:35:34,405 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-20 16:35:34,803 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-20 16:35:34,884 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$35b680f8] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:35:35,117 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8070 (http)
[INFO ] 2019-11-20 16:35:35,130 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:35:35,131 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-20 16:35:35,131 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-20 16:35:35,213 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-20 16:35:35,213 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 798 ms
[WARN ] 2019-11-20 16:35:35,260 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:35:35,261 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-20 16:35:35,264 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:35:35,264 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-20 16:35:35,381 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-20 16:35:35,954 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-20 16:35:36,041 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-20 16:35:36,069 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-20 16:35:36,315 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:35:36,315 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:35:36,391 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-20 16:35:36,392 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-20 16:35:36,507 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:35:36,611 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:35:36,611 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:35:36,612 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:35:36,612 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:35:36,612 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:35:36,612 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:35:36,612 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-20 16:35:36,708 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-20 16:35:36,710 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-20 16:35:36,711 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-20 16:35:36,714 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1574238936713 with initial instances count: 2
[INFO ] 2019-11-20 16:35:36,716 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-20 16:35:36,716 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1574238936716, current=UP, previous=STARTING]
[INFO ] 2019-11-20 16:35:36,717 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070: registering service...
[INFO ] 2019-11-20 16:35:36,723 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8070"]
[INFO ] 2019-11-20 16:35:36,739 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8070 - registration status: 204
[INFO ] 2019-11-20 16:35:36,742 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8070 (http) with context path ''
[INFO ] 2019-11-20 16:35:36,743 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8070
[INFO ] 2019-11-20 16:35:36,908 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.415 seconds (JVM running for 4.626)
[INFO ] 2019-11-20 16:35:40,955 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-20 16:35:40,955 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-20 16:35:40,961 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 6 ms
[INFO ] 2019-11-20 16:35:40,982 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:36:01,960 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:36:06,095 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:37:49,398 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$98851031] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:37:49,716 com.example.userservice.UserServiceApplication - No active profile set, falling back to default profiles: default
[INFO ] 2019-11-20 16:37:50,153 org.springframework.cloud.context.scope.GenericScope - BeanFactory id=202936f6-ccb4-3d46-85e2-77473ae72f07
[INFO ] 2019-11-20 16:37:50,233 org.springframework.context.support.PostProcessorRegistrationDelegate$BeanPostProcessorChecker - Bean 'org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration' of type [org.springframework.cloud.autoconfigure.ConfigurationPropertiesRebinderAutoConfiguration$$EnhancerBySpringCGLIB$$98851031] is not eligible for getting processed by all BeanPostProcessors (for example: not eligible for auto-proxying)
[INFO ] 2019-11-20 16:37:50,441 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat initialized with port(s): 8071 (http)
[INFO ] 2019-11-20 16:37:50,453 org.apache.coyote.http11.Http11NioProtocol - Initializing ProtocolHandler ["http-nio-8071"]
[INFO ] 2019-11-20 16:37:50,454 org.apache.catalina.core.StandardService - Starting service [Tomcat]
[INFO ] 2019-11-20 16:37:50,454 org.apache.catalina.core.StandardEngine - Starting Servlet engine: [Apache Tomcat/9.0.27]
[INFO ] 2019-11-20 16:37:50,535 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring embedded WebApplicationContext
[INFO ] 2019-11-20 16:37:50,536 org.springframework.web.context.ContextLoader - Root WebApplicationContext: initialization completed in 811 ms
[WARN ] 2019-11-20 16:37:50,584 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:37:50,584 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[WARN ] 2019-11-20 16:37:50,587 com.netflix.config.sources.URLConfigurationSource - No URLs will be polled as dynamic configuration sources.
[INFO ] 2019-11-20 16:37:50,587 com.netflix.config.sources.URLConfigurationSource - To enable URLs as dynamic configuration sources, define System property archaius.configurationSource.additionalUrls or make config.properties available on classpath.
[INFO ] 2019-11-20 16:37:50,705 org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor - Initializing ExecutorService 'applicationTaskExecutor'
[WARN ] 2019-11-20 16:37:51,252 org.springframework.cloud.loadbalancer.config.BlockingLoadBalancerClientAutoConfiguration$BlockingLoadBalancerClientRibbonWarnLogger - You already have RibbonLoadBalancerClient on your classpath. It will be used by default. As Spring Cloud Ribbon is in maintenance mode. We recommend switching to BlockingLoadBalancerClient instead. In order to use it, set the value of `spring.cloud.loadbalancer.ribbon.enabled` to `false` or remove spring-cloud-starter-netflix-ribbon from your project.
[INFO ] 2019-11-20 16:37:51,334 org.springframework.cloud.netflix.eureka.InstanceInfoFactory - Setting initial instance status as: STARTING
[INFO ] 2019-11-20 16:37:51,361 com.netflix.discovery.DiscoveryClient - Initializing Eureka in region us-east-1
[INFO ] 2019-11-20 16:37:51,608 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON encoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:37:51,608 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using JSON decoding codec LegacyJacksonJson
[INFO ] 2019-11-20 16:37:51,688 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML encoding codec XStreamXml
[INFO ] 2019-11-20 16:37:51,688 com.netflix.discovery.provider.DiscoveryJerseyProvider - Using XML decoding codec XStreamXml
[INFO ] 2019-11-20 16:37:51,813 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:37:51,918 com.netflix.discovery.DiscoveryClient - Disable delta property : false
[INFO ] 2019-11-20 16:37:51,918 com.netflix.discovery.DiscoveryClient - Single vip registry refresh property : null
[INFO ] 2019-11-20 16:37:51,919 com.netflix.discovery.DiscoveryClient - Force full registry fetch : false
[INFO ] 2019-11-20 16:37:51,919 com.netflix.discovery.DiscoveryClient - Application is null : false
[INFO ] 2019-11-20 16:37:51,919 com.netflix.discovery.DiscoveryClient - Registered Applications size is zero : true
[INFO ] 2019-11-20 16:37:51,919 com.netflix.discovery.DiscoveryClient - Application version is -1: true
[INFO ] 2019-11-20 16:37:51,919 com.netflix.discovery.DiscoveryClient - Getting all instance registry info from the eureka server
[INFO ] 2019-11-20 16:37:52,022 com.netflix.discovery.DiscoveryClient - The response status is 200
[INFO ] 2019-11-20 16:37:52,025 com.netflix.discovery.DiscoveryClient - Starting heartbeat executor: renew interval is: 30
[INFO ] 2019-11-20 16:37:52,028 com.netflix.discovery.InstanceInfoReplicator - InstanceInfoReplicator onDemand update allowed rate per min is 4
[INFO ] 2019-11-20 16:37:52,031 com.netflix.discovery.DiscoveryClient - Discovery Client initialized at timestamp 1574239072030 with initial instances count: 2
[INFO ] 2019-11-20 16:37:52,033 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaServiceRegistry - Registering application USER-SERVICE with eureka with status UP
[INFO ] 2019-11-20 16:37:52,034 com.netflix.discovery.DiscoveryClient - Saw local status change event StatusChangeEvent [timestamp=1574239072034, current=UP, previous=STARTING]
[INFO ] 2019-11-20 16:37:52,035 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8071: registering service...
[INFO ] 2019-11-20 16:37:52,042 org.apache.coyote.http11.Http11NioProtocol - Starting ProtocolHandler ["http-nio-8071"]
[INFO ] 2019-11-20 16:37:52,062 com.netflix.discovery.DiscoveryClient - DiscoveryClient_USER-SERVICE/fkk-PC:user-service:8071 - registration status: 204
[INFO ] 2019-11-20 16:37:52,065 org.springframework.boot.web.embedded.tomcat.TomcatWebServer - Tomcat started on port(s): 8071 (http) with context path ''
[INFO ] 2019-11-20 16:37:52,066 org.springframework.cloud.netflix.eureka.serviceregistry.EurekaAutoServiceRegistration - Updating port to 8071
[INFO ] 2019-11-20 16:37:52,229 com.example.userservice.UserServiceApplication - Started UserServiceApplication in 3.442 seconds (JVM running for 4.544)
[INFO ] 2019-11-20 16:38:18,936 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:38:19,646 org.apache.catalina.core.ContainerBase.[Tomcat].[localhost].[/] - Initializing Spring DispatcherServlet 'dispatcherServlet'
[INFO ] 2019-11-20 16:38:19,646 org.springframework.web.servlet.DispatcherServlet - Initializing Servlet 'dispatcherServlet'
[INFO ] 2019-11-20 16:38:19,651 org.springframework.web.servlet.DispatcherServlet - Completed initialization in 5 ms
[INFO ] 2019-11-20 16:38:19,672 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/18501707115
[INFO ] 2019-11-20 16:38:19,751 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:38:19,931 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/18501707115
[INFO ] 2019-11-20 16:38:20,098 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:38:20,268 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/18501707115
[INFO ] 2019-11-20 16:38:20,432 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/18501707115
[INFO ] 2019-11-20 16:38:20,602 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/18501707115
[INFO ] 2019-11-20 16:39:13,747 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8070/user/fengkaikai
[INFO ] 2019-11-20 16:40:36,619 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:42:16,092 com.example.userservice.controller.UserController - ------------reuqest url:http://fkk-PC:8071/user/18501707115
[INFO ] 2019-11-20 16:42:51,927 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:45:36,625 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:47:51,934 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
[INFO ] 2019-11-20 16:50:36,631 com.netflix.discovery.shared.resolver.aws.ConfigClusterResolver - Resolving eureka endpoints via configuration
